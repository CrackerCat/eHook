// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/a12-5.10-arm64_min.btf
// assets/ebpf_module.o
// assets/rock5b-5.10-arm64_min.btf

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAssetsA12510arm64minBtf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x31\xae\xc2\x30\x10\x44\xdf\xfe\x9f\xa0\x50\x91\x92\x0e\x57\x34\x94\x20\x6a\x8e\xc0\x0d\xdc\x10\x59\x91\x90\x41\x24\xb9\x0b\x1d\x07\xe4\x12\x68\xe3\x91\x10\x23\x79\xed\x19\x3f\x8d\xfd\x7a\x1b\x6b\x8a\x9e\x5a\x7b\xc0\x4a\x64\x15\x10\xc0\xea\xe2\x9b\x7f\x60\xa9\xb3\xdf\xad\xc4\x35\xc0\x49\x3d\x06\x55\x6b\xb0\x75\x88\xaf\x0c\xea\x56\xc5\xea\x63\x27\xfe\xac\x7c\xc1\x8f\xfc\x39\xfe\xf4\x9f\x8d\x9b\x3e\x8f\x4c\xc7\x03\x31\xfa\xbc\xde\x72\x0a\xf3\x98\xf2\xd0\xa7\xdc\x5d\x82\x03\x8f\x2e\x0d\xdc\xc7\x38\xef\x9f\x00\x00\x00\xff\xff\x4e\x94\x61\xb7\xe3\x00\x00\x00")

func bindataAssetsA12510arm64minBtfBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsA12510arm64minBtf,
		"assets/a12-5.10-arm64_min.btf",
	)
}



func bindataAssetsA12510arm64minBtf() (*asset, error) {
	bytes, err := bindataAssetsA12510arm64minBtfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/a12-5.10-arm64_min.btf",
		size: 227,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1743497163, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAssetsEbpfmoduleO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x7a\x0b\x70\x54\xd7\x79\xff\xef\xdc\x73\x77\xf7\xee\xae\x56\x12\x08\xa1\x15\x12\xe8\x4a\x48\xb0\x10\xb2\x7a\x58\x06\x02\xd8\x7f\x99\x18\x0c\x84\x10\x99\x87\x2d\x62\xfb\x7f\xb5\x48\x17\x69\xc3\x6a\x77\xbd\x0f\x45\x08\x27\x21\x13\xbb\x21\x38\x8d\x49\xc7\x19\xd3\x8e\x27\x46\x7e\x4c\x89\x27\x75\x48\x9c\x19\xd3\x38\x8e\x99\x24\x6d\x69\xe2\x7a\xdc\x8e\xdd\x7a\x1a\xcf\x84\x66\x9a\x8c\x33\x75\x5b\xb5\xe3\xd6\x6a\xe2\x46\x9d\xef\xdc\x73\x77\xef\x1e\xed\x42\xdb\x49\xef\x8c\xf6\x9e\xdf\x77\xbe\xd7\xf9\xce\xe3\x3b\xe7\x5c\x7d\x66\xd7\xfe\xdd\x1a\x63\x70\x1f\x86\xf7\x50\x46\xe5\xc7\xdc\x58\x2e\x0f\xc9\x5f\x13\x0c\x2f\xaf\x74\x68\x2f\x48\xa1\x97\xc7\x9c\x77\x43\x93\xa4\x07\x9c\xf7\xa9\xd9\xf9\x45\x51\x3f\xe7\xe0\x00\x03\xe6\x17\x17\x17\x5f\xd0\x00\x03\xc0\x43\x00\x74\x00\x27\x9f\x72\xf8\xf2\xb3\xbf\x11\xef\x13\xb3\xef\x8b\xf7\xd8\xec\xc2\xe2\x8d\xf4\xd4\x4b\x3d\x59\x00\x51\x06\x24\xd3\xc9\x02\xf1\xc4\xf3\xd3\x63\x27\x9f\x74\xe4\xee\x5b\xbe\x4a\xc8\x25\xe6\x1c\x7d\x47\x58\x14\xf1\xc4\xf8\x31\xd7\xff\xe4\x93\x8e\xbd\x23\x5a\x33\xc6\x45\xbd\xd3\xc0\x17\x0c\xa7\x7e\xec\xec\x3b\x8e\xfd\x27\xa5\x7d\x0d\x78\x67\x71\x71\x31\xaa\x04\xed\x21\x11\x4b\xe0\x65\xd9\xfe\xe6\x80\xa3\xe7\xd4\x59\xc7\x0f\xb2\x47\x2a\x1b\x64\xfc\x6a\xc5\xc5\x8d\x67\x29\x3e\x73\x8e\xfc\xa9\x16\x87\xee\x43\xb8\x14\x7f\x26\xf0\x2f\x1d\xfd\x7e\xe9\xef\x27\xe6\x97\xf8\x3b\x7f\x1d\x7f\x9b\x65\xef\x9f\x1a\x95\xfd\x27\xeb\xbf\x22\xdf\x6a\x7f\x8f\xad\x7a\x7f\x89\xfe\xf7\xaf\xa3\xff\x88\xd4\xef\x43\xab\x78\x9f\x94\x7c\xcd\xcc\x69\xd0\xcb\x09\x07\x47\xb5\x4a\xf9\x28\x07\x16\x17\x17\x17\x4b\x58\x77\xfa\xdb\x7d\x5e\xf0\x01\x21\x69\xa7\xb5\xc2\xbf\x85\x25\xfe\x2d\xfc\xb7\xfc\xf3\x55\xf8\x47\xfe\xb4\x7a\xed\xf1\xf2\xb8\xed\xae\x12\xa7\x3b\x86\xf7\xe3\x37\x1e\x7f\xff\xaf\x1e\x1a\xe3\x34\xbe\x69\x0c\x8f\x63\x2a\x33\x9e\x3c\x9e\xb4\xc7\xe3\x21\xe4\x0b\x99\x6c\xd6\x1e\x47\x1b\xa3\xc6\x18\x68\x00\xb0\x03\xc0\x9d\x00\x46\xe5\x24\x39\x29\x1b\x70\x1e\x00\xc5\xe7\xdb\x00\xfe\x0c\xc0\x5f\x02\xf8\x29\x80\x7f\x02\xf0\xef\x00\x82\x34\xb8\x0c\x1d\x06\xbb\x53\x37\xae\x6a\xec\x2e\xfd\x0c\xbf\xc0\xd9\x5d\x44\x8c\x8d\x68\xb3\x86\x3e\x72\x9e\xb1\x43\x02\x2a\xd5\xa5\x8a\xf3\xec\x1a\xe7\xb3\xc6\x13\x54\x9e\x67\x0b\x4c\xeb\x7b\x42\x5f\x60\x67\xb8\x36\xab\x13\xe9\xa2\x76\x86\xb3\xbb\xa9\x74\x49\x5b\xd0\x48\xe5\x02\x51\xee\x24\xca\x05\x7e\x91\x13\xfb\x45\x7e\x8d\x6b\xb3\x06\x91\x5e\xe3\xd7\x38\x1b\x06\xab\x93\x4e\x5d\xd4\xc8\x5c\x9d\xde\x18\x25\xc6\xe8\xa8\xd0\x5a\xa7\x0f\x8d\x3a\x4c\x97\xd8\x65\x61\xf0\x32\x3b\xaf\x69\xb3\x20\xd2\x35\x76\x5e\xa3\xca\x65\xac\xa7\xa7\xc9\xc7\x7b\x72\x2d\x8d\x2d\x6d\x3d\xcb\xd8\x91\xb5\xf9\x96\x42\xcb\x17\x69\x38\x6a\x83\xe0\x3d\x7b\x9b\xfe\x5f\xeb\xb6\xf0\xf6\xb0\x16\x05\x38\x63\x7b\x9b\x00\xbd\x13\x7b\x9b\xb6\x84\x01\x5f\x37\x78\xcf\xad\xe1\x70\x18\xf0\x53\x31\x1c\xbe\x35\x0c\x04\x56\x62\x6f\x13\xef\x21\x21\xc0\x68\x62\xe1\xb0\x53\x0c\x46\x84\x3a\x02\x5b\xc3\x40\xa8\x01\xa4\x2c\x2c\x94\xf9\x80\xba\x26\x46\x1a\x1c\xde\xc8\x20\x1c\x4e\x32\x5b\x3f\x58\x12\x04\x1a\x9a\xd9\xde\xa6\xf5\xad\x40\xa3\x4f\xc8\x2f\xa3\x8e\x5d\xbe\x0e\x40\x53\x89\xcd\x07\xac\xd0\xd9\xde\x26\xa1\xcd\x07\x34\xc7\xc0\x7b\xda\x1b\x80\x95\xc2\x86\xcf\xa1\xb6\x44\x1c\x1b\x3e\xf2\x26\xda\xc2\x5c\x7a\x6b\xc9\x4f\x51\xb3\xaa\xa9\x54\xd3\xe6\xa9\xf1\x01\xed\x71\xe6\x34\x73\x7d\xab\xd9\xc9\x80\xd5\x3e\x38\x98\xfc\x5a\x33\xe8\x01\x1d\x61\x06\x98\x71\xb6\xac\x6d\xb9\x7f\x28\x3a\xdb\xea\x8a\x51\x70\x81\x4e\x1f\xb4\xae\x32\x73\xd7\x6a\xd6\xdf\x74\x64\xed\x48\xf8\x68\xf8\xee\x30\xb0\x96\x6a\xfb\x9b\x80\xee\x41\x59\xe8\x09\xb3\x23\x6b\x81\x75\x83\xd0\xa2\x84\xd7\x87\x85\x62\x00\xdc\x47\x83\x9d\x89\xb5\x9a\xa1\x4e\x96\x00\x94\x56\x13\x3f\x51\xea\xe4\x9f\xc6\xb7\x11\x8d\x6b\x73\xe0\xbb\x69\x81\xdd\x27\x56\x59\x9f\xee\x67\x7e\x9f\x11\xd0\xfc\x47\xa9\x5a\xd7\xe6\x58\x80\x96\x25\x83\x35\xfa\x02\x01\x5d\x0b\xd2\xdc\xd1\x42\xda\x9c\x66\x98\x9a\x2f\x18\xfa\x7d\x82\x7e\x04\xeb\x9e\xa3\x42\xc0\x08\x46\xae\x50\xc1\x68\x0c\xd6\xff\x09\x15\x82\x51\x84\xbe\x4a\x76\x9e\xf5\xd8\x08\xfb\xf4\xd0\xf3\x2e\x31\xbc\x4f\x18\x42\x88\x40\x88\xac\x6a\x0d\x6f\xd0\xef\x32\x6d\x8e\x1b\xa6\x56\x27\x8d\x44\x5c\x23\xf5\xae\x91\x06\xd7\x48\x63\x14\x5a\x23\x4d\x54\xee\xd7\xe6\x74\xc3\xe4\xfe\x60\x68\x40\x40\x04\xeb\x3e\x2c\x0a\x46\x30\x72\x58\x14\x1a\x83\xf5\x09\x51\x88\x22\xb4\x85\x79\x1d\xf3\x23\xb4\xa7\x82\xc0\x10\x3a\xca\x80\x00\xf9\xb4\x8c\xad\x09\x1d\x67\x40\x5d\xb3\xc1\x79\x70\x79\x91\x18\x75\x20\xf0\x29\x06\xac\x60\x2b\x7c\x4d\x01\x23\xf2\x30\x11\xeb\xb4\x39\x5f\x39\xa0\xf5\xa8\x5f\xf9\x04\x03\xf4\x44\xe8\x69\x06\x34\xfc\x31\x03\x1a\x5f\xa2\x1f\x52\xda\xf8\x3d\x91\xb6\x5a\x7c\xc6\xb2\xd0\x0f\x18\xb0\xbc\x29\x2a\x98\x5f\x0a\xd5\xb7\xbe\x41\x85\x9b\x42\x7f\x4b\x52\x2f\x95\xa4\x84\x40\xe4\x5d\x32\xb4\x52\x9b\xf3\x97\x0d\x85\x11\x09\x69\x00\x6f\xd1\xe6\x02\x65\xaa\x81\xa6\x55\x1d\x1a\xa0\x5f\xd2\x42\xdd\x5a\x85\x7d\xf1\x53\xac\x28\xa1\xa9\x6d\x3f\x31\x5f\xe6\xa1\x3b\x2b\x99\xbf\xe7\x7a\x8c\x15\x34\x18\x74\xb6\x78\x7f\x73\x3b\xa5\xa4\x86\xe6\xd5\xce\x6b\x0d\xb0\xb2\x6f\x98\xb1\x59\xbd\xe5\xcb\x1a\xc0\x4e\xe9\x88\x36\x32\x76\x4a\x6f\xed\xb8\x99\x03\xec\x01\x1d\x2d\xcf\x52\xc5\xa7\x74\xac\x6a\x64\xec\x53\x7a\xab\x99\xa7\x8a\x4f\xeb\x68\xed\xfc\x0c\x95\x3e\xa3\x2f\xb4\x75\x89\xd2\x69\x1d\xac\x6d\xad\x28\x7e\x56\x37\x18\xd0\xb6\x4e\x80\x07\xf5\x46\xd6\xb6\xfe\xf3\x54\x7c\x48\x8f\xb2\xb6\x8d\xd4\x3d\xec\x77\xf4\x76\xd6\xf6\x01\xc1\xf0\x79\xdd\x64\x6d\x9b\x44\xf1\x8c\x1e\x63\x6d\x1f\x7c\x8c\x8a\x5f\xd0\xfb\x58\x5b\x5c\x50\xcf\xea\x43\xac\xad\x57\x14\x1f\xd6\xf7\x30\xac\xec\x6e\x64\x2c\xaf\xb7\x9a\x13\x44\x2a\x90\x2f\x14\x09\x56\x24\x5f\x44\x69\x5a\xf8\x22\x8a\x9f\x24\x5f\x38\x15\x45\x70\x3b\xc0\x49\x91\x2c\x07\x88\xde\xc3\xba\x02\x8f\x70\x60\x03\x6b\x0f\xd0\x30\x8a\xb1\xfa\x32\x8f\x86\xf6\x7e\x6e\xac\x1e\xe0\x86\xa6\x03\x6b\x6e\xe2\x21\x12\x59\x33\xc8\xc3\x01\x1d\xe8\x58\x73\x33\x0f\x11\xaf\x28\x85\xeb\x74\x51\xda\xcc\x23\x14\xf6\x35\x5b\x78\x84\x46\x2d\x55\x45\x04\x93\xa8\x6b\x90\x75\x0d\x09\x91\xa9\x43\x9f\xd5\x80\x10\x75\x7e\x79\x04\x34\xc0\x34\xe6\xc9\xf9\x8f\x7f\x08\xc2\xa5\x4e\x0c\x20\x40\x0e\x74\x3d\x25\xf4\x18\xbe\xb5\xda\x1f\x72\xa0\x9b\x7f\x83\x7e\x75\x4a\xee\x3d\xac\x9b\x5d\xa1\xda\x1e\x6d\x9d\xf6\x65\xe3\x47\x54\x5c\x1f\xa4\x4c\xd9\xed\x7b\x9d\xb8\xfc\x6f\x71\x60\x7d\x68\x0f\x51\x02\x3f\x17\x7a\xd6\x87\x69\x6b\xdc\x6d\xcc\x53\x7d\x70\x41\xd0\xd0\xbe\x95\xaf\x58\x3d\xc0\x57\x68\xba\xe3\x70\xb3\x74\xb8\x59\x38\x4c\x94\x16\x49\x69\x71\x9a\x60\xd6\xc5\x84\xb3\xdb\x10\x11\xce\x86\x06\x10\x11\xce\x3e\xaa\x03\x1c\xf5\xbe\x1e\xbd\x3b\x3c\xa7\x03\xdd\x75\x5f\xa3\x08\xf5\xf8\xba\x23\xcf\x13\xac\x7f\x51\x77\x16\xb9\xfb\xe1\xe4\x7c\xda\x7b\xb6\x03\xf8\x00\x80\x41\xb9\x71\xa7\x80\x1c\x92\x7b\x00\xca\xd7\x5b\xf5\xa1\xd3\x4c\x3f\xc3\xae\x71\x17\x8e\x88\xbc\x2d\x88\x17\x99\x48\xaa\xa6\x1e\x3b\xaf\xb9\xa5\x51\x27\xa1\x5e\x61\xfa\x55\xb6\xc0\xc0\x8d\x79\xce\xeb\x2e\x6a\x98\x17\x46\x9d\x87\x8c\x6e\x91\xc6\x0e\x03\xa0\x06\x4e\x01\x98\x06\xf0\x39\x00\x5f\x00\x70\x4e\xee\x96\x68\x61\x7b\x06\xc0\xd7\x00\x7c\x03\xc0\x65\x00\xdf\x07\xf0\xa7\x00\xfe\x1c\xc0\x5b\x00\x7e\x06\xe0\x97\x00\x16\x00\xfc\xa7\x58\x89\xa8\x83\x80\xed\x0c\x18\x66\x00\x05\x2e\xcf\x80\x87\x18\xf0\x08\x03\x1e\x65\xc0\x63\x0c\xf8\x03\x06\xcc\x31\xe0\x39\x06\x7c\x8b\x01\xdf\x61\xc0\x0f\x19\xf0\x23\x06\xbc\xca\x80\xbf\x66\xc0\x2f\x18\xf0\xcf\x0c\xf8\x15\x03\xc2\x1a\xb0\x42\x03\xda\x35\x80\xd6\x8a\x98\x06\x6c\xd1\x80\x0f\x69\xc0\xad\x1a\xb0\x5b\x03\x0e\x68\xc0\x5d\x1a\x70\x4c\x03\x8e\x1c\x2b\xa6\x0b\x45\x73\x2c\x95\x48\x4f\x98\xd3\x76\x2e\x9f\xcc\xa4\xcd\xfe\x9b\xe3\x7d\xf1\x2d\x28\xe6\xed\x5c\x6f\x32\x3d\x96\x2a\x8e\xdb\xbd\xf6\xb1\xec\x71\x6b\x2a\x33\x5e\x4c\xd9\xf1\x31\xf4\x4e\xa5\x0b\xbd\xe3\xbd\x87\x26\x93\xe9\x4c\xaf\xbd\x27\x93\x39\x01\xcb\x4a\x25\xc7\xec\x74\xde\xc6\xd8\x64\x22\x07\xcb\xba\xed\xe0\xc1\xdb\x8e\x5a\x87\xf6\x7e\x7c\x97\x75\xf8\xe8\xf0\x2e\xcb\x82\x25\x0d\xa0\x98\xce\x27\x27\xd2\xf6\xb8\x99\x4c\x17\x60\x59\xc5\x9b\x06\x60\x4f\xdb\xe9\x42\x1e\x85\x93\x59\x1b\x44\x9d\x4a\xcc\x58\x76\xba\x90\x4b\xda\x79\x9c\xb0\x4f\x62\x3a\x91\x2a\xda\x48\x65\x26\xac\xa9\x44\x36\xef\xb0\x53\x11\x24\x3c\xd2\x5f\x56\x99\xca\xa4\x27\xc4\x0f\x29\xde\x3c\x88\xf1\x44\x21\x61\x15\x40\xee\x67\x73\x99\x63\xb6\x95\xb3\x13\xe3\x10\x0c\x95\x34\x8b\xda\x2b\x68\x53\x89\xac\x95\xca\x64\x4e\x14\xb3\x96\x9d\xb2\xa7\x1c\x3e\x3b\x77\xdc\x72\xac\x66\x8a\x85\x6c\xd1\xab\xf1\x93\xb9\x64\xc1\x76\xc4\x77\x0e\xef\xb6\x76\x5b\x7b\x0f\xdc\xbe\x6b\xc4\xfa\xe8\x6d\x87\x3e\x22\x09\x1f\x3e\x72\xf0\xe0\xae\x03\x87\xad\x0f\x0f\x1f\x71\x29\x87\x47\xf6\xef\x3a\xe0\xf0\x90\xa4\x95\xb3\x27\xf2\x10\x3f\xf9\x2c\xb2\x63\xc8\xe6\x0b\x89\x82\xed\xd4\x65\x0b\x4e\x35\xb5\x27\x93\x4b\x4e\x58\x33\x7d\xc8\x9f\xcc\x8f\x25\x52\xa9\x74\x06\x96\x95\xbf\x69\x00\xf4\x57\x4c\x17\xf3\xf6\xf8\x80\xc3\x93\x18\x1f\xcf\x59\xa9\xe4\x54\xb2\x80\xec\x54\xce\xca\x27\xa6\x6d\xe4\x0b\x89\xb1\x13\xc7\x73\x89\x29\x0a\xe5\xd8\x89\x71\x3b\x6b\x4d\x26\x72\xe3\xc9\xdc\xfd\x79\xd8\x33\xc9\x82\x95\x1b\x2b\xc2\xb5\x96\x49\xef\x4a\x17\xec\x1c\xc6\x0a\x33\xc8\xe6\x32\x59\x2b\x9d\x98\xb2\x85\x5a\xe4\x61\x4d\x27\x52\xb0\x2c\x6b\xd6\xce\x91\x07\x16\x85\x19\x99\xf4\x7e\x9b\xcc\x38\x61\xb1\x85\xb4\x53\x4e\x09\x7a\x4a\x4e\xeb\xff\xe9\xe3\x9e\x93\x5a\x15\xfa\xbc\x7c\xf7\xc9\x33\xce\x05\xe5\x4c\xf4\xc4\x3f\x30\x44\x65\xf9\x2d\xdd\xf9\x73\x16\x5e\x67\x4f\xc5\xe5\x99\x89\x5e\xb4\xf2\x98\x25\x08\xee\x6e\xba\x74\xf9\xe7\xab\xe4\x2b\xe9\xf0\x97\xcb\x15\x32\xd0\xcb\x3c\x9e\xa3\xa0\x16\x2c\xb7\xc3\x08\x89\xa4\xb3\x54\xaf\x0e\xe8\x54\xde\x54\xf6\x0f\xfd\xd2\x07\x5a\x02\x6f\xa1\x73\x20\x80\xd3\x00\x6e\x83\x73\x8e\xa3\xcd\xd4\x1d\x32\x5c\x61\x8f\xdc\xff\x56\xd7\x01\xa9\x2b\xe2\x91\x13\xdb\xb4\x1a\xed\xf5\xc4\x41\x5b\x5e\x83\xc7\xab\x67\x05\x80\xbb\x65\x1c\x82\x1e\x3a\x1d\xcf\xef\x71\x78\x75\xf2\xe5\x18\x00\x79\x55\x00\x5b\xf2\x53\x9f\x9e\x90\x71\x33\x4a\xf7\x39\x95\x6d\x6d\xf0\xb4\x75\x99\xa7\xad\x4d\x9e\xb6\x36\xcb\xb6\x7e\x5a\xb6\xb5\x55\xf1\x91\xb2\xc0\x19\x3a\x3e\x02\xfa\xb0\xac\x58\x2d\x2b\xcf\x89\x34\x0c\x9c\x36\x9c\xe3\xe7\x5a\xd2\x65\x38\xc7\x50\x6a\xdb\x35\x03\x78\x56\xf2\x90\x82\xef\xc8\xf2\x50\x10\xf8\x01\x25\x3d\x92\x0d\x02\xaf\xba\x3c\x21\xe7\xc8\x2a\x78\x42\xd2\x01\xc0\xd7\xc8\x80\xb7\x29\xbd\x96\xfd\x2a\x8d\x93\x7f\x95\x6d\x26\x9e\xc5\xf2\x58\x82\xce\x9c\x98\x5d\x09\x38\xf7\x31\x22\x7e\x06\x10\x92\xe5\x21\xa3\xb2\x7f\x5a\x64\xff\x74\x78\xe2\xe8\xea\xec\xf2\xe8\xec\xf4\xe8\xec\xf4\xe8\xec\x94\x3a\x97\x39\x31\x32\x5a\x94\xfe\xef\xf4\xe8\x6f\x96\x3c\xdd\x34\x0f\x64\x59\xab\xc1\xef\xd2\x19\x10\xa1\x72\x07\xed\x22\x29\xd6\xce\x5d\x51\xdd\xba\x1a\xf5\xdf\xd4\x9c\xfa\x18\x80\x3b\x9d\xf9\x2e\x6e\x08\x0d\x65\x7e\x6f\xf4\xcc\xef\xbb\x1c\xbe\xfa\x0f\xc8\x31\x30\x2a\x71\xb0\x72\x4c\x54\xc8\xd5\xd7\xa0\x87\x6b\xd0\x29\xec\x49\x2e\x88\x62\x78\xd6\x79\xfa\xb3\xde\x53\x5e\xe5\x29\x67\xb8\xb0\x2f\xf8\x37\x95\xfb\x07\x9f\xf4\xd0\x3f\xe8\xa1\xc3\xc9\xa9\x55\xb2\xaf\xc8\xb3\x15\xa9\x57\x64\xdb\xea\x99\x56\xe6\xe3\x52\xc2\x25\x59\x99\x4a\x47\xfa\x65\x6a\xad\x92\x73\xcb\x79\xb9\x94\x45\x96\xe4\xab\xdf\x4e\x96\x2a\x27\xcd\x8a\x14\x59\x25\x83\x6e\x1e\x14\xc9\xd1\x49\x93\x32\x99\x95\xd2\x53\x51\x80\x5e\x2f\x69\xe9\xe6\xa6\xf7\x3a\x5b\xa1\x64\xba\x60\x7a\xa4\x63\xf9\x42\xae\x38\x56\x30\xa5\x3f\x1b\xcd\xb1\xc2\xcc\x06\xf3\x14\xfa\xb6\xf5\x6d\xeb\xdf\xd6\xb7\xad\xef\x86\xea\xe3\x71\x81\xe3\x63\x30\x4d\xd3\x14\x91\x36\x2b\xd3\xaf\x79\x8b\x79\x70\xd7\x6d\xb7\x5b\x1f\xd9\x75\xf0\x40\x6c\xac\x30\xf3\xc1\x5b\xc9\xd4\x3d\x7d\xf7\x6d\xd8\x2e\x64\x68\x03\xb6\xd1\xcc\x4b\xb6\x58\xa5\xf0\x26\xb3\x7f\x50\xf2\x25\x8f\xc7\x3a\x2d\xeb\x58\x31\x99\x2a\x24\xd3\xd6\x94\x3d\x35\x36\x95\x8d\xe5\x37\x99\x5d\x15\x77\x72\x5d\x42\x82\xda\x60\xca\xe7\xd0\xae\xc3\xb1\x91\xfe\x4d\x55\x9d\xe8\xbf\x6f\xc3\x86\xed\xa5\xd6\xf6\x2f\x91\xe9\x93\xb6\x73\x76\xa1\x98\x4b\x9b\x7d\xdb\x2b\x36\x08\x15\xbd\xe1\x90\xca\xf1\x15\xb8\x56\x7c\x65\x7b\xee\x10\x66\x36\x98\x9d\xb7\x98\x7d\x5e\x97\xf7\x7f\xec\x8e\x58\x57\xe9\x72\xf1\xde\x34\x35\xca\x75\x85\x9e\xbb\x0f\xee\x3d\xbc\xcb\x95\xde\x64\x76\xc9\xcb\xc7\xae\x0d\xdb\xdd\xed\xac\xbb\xbb\x2d\x6d\x62\xe3\x62\x5e\xb8\x64\x97\x2a\xf6\x1c\xee\xfa\xdc\x2d\xff\xe8\xa8\x1f\xd5\x9c\xf9\x4b\x6b\x40\x2f\x2b\xaf\x29\xeb\x01\xbc\xa4\x95\xf1\x06\x00\x8d\x92\x67\x85\xa4\xed\x64\x40\x96\x39\xc7\x12\x5a\xd3\xe8\x44\xf0\x63\x06\xb4\xc7\x80\xad\xb2\xde\x7d\x86\x94\xfa\x11\x89\x17\x69\xb1\xd8\xe4\xe4\x3e\x2f\xff\x19\xa5\xfe\xa2\xc4\xeb\x35\x20\xd8\x07\x5c\xf3\x60\xa3\xcf\xd9\x73\x11\xbe\x87\xea\x07\x9d\xc5\x71\xce\xa3\xcf\x60\x95\xf5\x7d\x0a\x1e\x56\xf8\x47\x94\xfa\x19\x05\x5f\x90\xf8\x11\xc2\x3b\x80\x4b\x8a\xfc\x65\xa5\xfe\x1a\x73\xda\xf7\x94\x26\xae\x37\x45\x6c\x43\x9e\x38\xbe\xa6\x39\x67\xc9\x46\xd9\x8e\xf7\xa8\x5d\x87\x9d\xb5\xd6\x1b\x97\x98\x52\x3f\x2a\x71\x3d\x07\x82\x23\xc0\x25\x89\xe3\x84\xef\x75\xf6\x11\xde\xfa\xab\x4a\xfd\x82\x82\xa3\x5e\x3f\x77\x94\xfb\x5c\x93\x63\x84\xf6\x1e\x8f\x49\x7f\xb6\x32\x07\x3f\xe4\x49\x94\x94\x3b\x16\x17\x17\x17\x75\x18\x30\x1e\x08\x97\xc6\x8a\xfb\xcc\x4b\x59\x95\x1e\x93\xf4\x49\x79\xad\xfe\x98\xe8\x33\xf6\xeb\xfa\x08\x18\x13\x59\x92\x06\x27\x63\x1d\x22\x99\x34\xc9\x2c\x44\xa3\x8c\xb3\x0e\xad\xc1\xb7\xc6\xb7\x87\x2a\x3e\xfa\x66\xb7\x6f\xf7\x99\xe7\x7f\xfe\xf8\x53\xaf\xb0\x4f\xff\xd5\xed\xff\x36\x46\x82\x3f\x59\x65\xbe\xf5\xb1\x99\xc9\xa9\xcb\x91\xff\xdf\x7b\x7a\xdf\x1f\x45\xe9\x18\xaf\x0d\xde\x32\xba\xe1\x5b\x67\x97\x9f\xed\x7e\x7d\xd5\xc4\x95\x9f\x7c\xf5\x77\x4f\x92\xaa\xcb\x1d\xcf\xbc\xfb\xfd\x17\xff\xe6\x73\xf9\xc7\xff\xe2\xb9\x55\x0f\x06\xee\xa3\x51\xc9\x7e\xfa\xda\xc3\xdd\xf7\x0d\x6c\x19\xba\x67\xf2\x3d\xfd\xa4\xf9\xab\x49\x1d\x08\x96\x5a\x1c\xd5\xb9\xaf\x3d\x74\x8f\x0e\x1f\xfc\x7c\x3a\x4e\x88\x87\x4c\x5f\x83\xff\x16\x87\x54\x1c\xd1\xb9\xaf\x81\x87\x4d\x5e\x8c\xfb\x82\x7e\x5e\x17\xf7\xf3\xc2\x3e\x5e\x67\xfa\x8c\x38\x2f\x98\x44\x8a\x98\x7e\x9e\x37\x79\x24\x3e\xc2\xf3\x3b\x78\x24\xbe\x8f\xe7\xe3\x7e\xde\xb0\xc3\xcf\xef\x37\x79\x43\x5c\x87\xcf\xe7\xe7\xb3\x23\x9a\x06\xc6\x2a\x6c\xf3\x3a\xa6\x73\x9f\x11\xda\xec\xe7\x27\x4c\xde\x1c\xe7\x27\xf6\xf1\x66\x52\xd9\xeb\xe7\x9f\x38\xe7\xe7\x2d\xa6\x9f\x27\x4d\x3f\x5f\x69\x76\xfa\x79\x72\x1f\x6f\x31\x4d\x47\xd9\xcc\x3e\xa1\xac\xca\x71\xd9\xbb\xe4\x43\x5d\xff\x6b\xd0\xaf\x77\x22\x9f\x9e\x4a\x25\xd3\xc5\x19\xeb\xe6\xfe\xbe\xf8\x24\x84\x8d\xf8\x24\x64\x22\x21\xce\x49\x3b\x95\xb5\x73\xd6\xb8\x7d\x3c\x1f\x9f\x44\xed\xa7\x9b\x36\xde\xf8\x97\xaa\xdf\x7d\x38\xf8\x12\xda\x47\x98\x53\x73\x46\x39\x7b\xa5\x25\xfd\x9a\xc2\x3f\x2a\xe9\xe7\x15\xfe\x83\x2e\x7f\x95\x8f\xb7\xbc\x74\x2f\x53\x7e\xc4\x5d\x27\x7c\x18\x56\xe8\x47\x25\x5d\xfd\x3e\x36\x21\xe9\xf3\x55\xdb\x15\xaa\x42\x25\x7a\xb8\x06\xbd\xae\x06\xbd\xa1\x06\xbd\xb1\x06\x7d\x79\x0d\x7a\x53\x0d\xba\x7a\x02\x76\xe9\x6d\x35\xe8\xab\x97\xd0\xbe\x02\x60\xb9\xa7\x1f\xdd\x75\xe2\x9b\xe2\x9c\x14\x2c\x9d\xa5\xdc\x1c\xf6\x8f\x82\xbf\x1c\x7f\x77\xfd\x18\x95\xfc\xa6\xc2\xff\x1f\x82\x1e\x28\xf1\xbb\xc7\xe0\x1f\x0b\xba\xb1\x84\xbe\x53\xea\x81\xa2\xc7\x70\x0f\xe6\x00\x56\xca\x75\xde\x8b\x63\xa8\xc4\x93\x1e\x1c\x95\x79\xcd\xc5\xd4\x8b\x57\x15\xfe\x05\xa5\xde\x28\xc5\x0c\x88\xc8\x33\xa3\x8b\x1b\xe4\x59\xd1\xc5\x4d\xf2\xbc\xe7\xe2\x65\x32\x8f\xbb\xb8\x5e\x5e\x59\xba\xb8\x4e\xd1\xdf\xe8\xd9\xfb\xbb\xb8\x51\xc1\x2b\x14\x1c\x55\x70\xbb\x82\x4d\x05\x77\x2b\x38\xa6\xe0\x4d\x0a\xee\x53\xf0\xa0\x82\xb7\x2a\x78\x87\x82\x87\x14\x7c\xbb\x82\xf7\x28\x78\xbf\x82\x87\x15\x7c\x58\xc1\x23\x0a\xbe\x57\xc1\xa3\x0a\x1e\x57\xf0\xa4\x82\x53\x0a\xce\x2a\xb8\xa0\xe0\x19\x05\x3f\xa0\xe0\xd3\x0a\x7e\x50\xc1\x67\x14\xfc\x45\x05\x9f\x53\xf0\xa3\x0a\x3e\xaf\xe0\xc7\x15\x7c\x41\xc1\x4f\x2b\xf8\xa2\x82\xbf\xae\xe0\x4b\x0a\xfe\xb6\x82\x2f\x2b\xf8\xbb\x0a\xbe\xa2\xe0\x1f\x2a\xf8\xaa\x82\x5f\x51\xf0\x6b\x0a\x7e\x5d\xc1\x6f\x2a\xf8\x2d\x05\x5f\x53\xf0\xdf\x2b\xf8\x6d\x05\xbf\xa3\xe0\x79\x05\x7b\x3f\xbc\xb6\x7a\xe6\xa7\x26\xcf\xe7\x51\x0f\x6e\xf3\xcc\x3f\x4d\xd6\xc5\x3c\x78\xa5\x67\x7e\x69\x72\xbd\xd9\xaa\xe0\x21\x05\xef\xf1\x60\xcd\x33\x3f\x5c\x3c\xa2\xe0\x51\x05\x4f\x7a\x30\xad\xc6\x4f\xcb\x05\x57\x97\xfe\x5e\xf2\x60\xf2\xf7\xbb\x1e\x4c\xfe\xbe\xee\xc1\xd4\xfe\x77\x3c\x78\x95\x72\x17\xa1\x79\xd6\x03\x5d\xda\x1b\x56\xea\x47\x15\x9c\x55\xf0\x69\x05\x9f\x53\xf0\x05\x05\x5f\x52\xf0\x15\x05\xbf\xa6\xe0\x6b\x0a\x9e\x57\xb0\x7b\x00\x73\x71\xa3\x82\x4d\x05\xf7\x29\x78\x48\xc1\xc3\x0a\x1e\x55\x70\x56\xc1\xa7\x15\x7c\x9e\x55\xc6\xf3\xa2\x82\x2f\x2b\xf8\xaa\x82\xdf\x54\xf0\xdb\x0a\x5e\x50\xb0\x7b\x09\xe7\xe2\xa8\x82\x63\x0a\xbe\x5d\xab\xf4\xf7\xb0\x82\xbd\xf9\x6b\xb9\x32\x5f\x34\x25\xff\x2c\x57\xe6\x47\xc0\x73\xef\xc8\xa5\xae\x75\x0a\xde\xa8\xe0\xb8\x82\xb7\x29\xf8\x63\x0a\x1e\x57\xf0\x49\x05\x7f\x49\xc1\x17\x15\xff\xbb\x59\xa5\xbf\xcd\x2d\xad\xab\xda\xa2\x2b\x11\x1f\xb7\x8f\x15\x27\xac\xc4\xb1\x63\x39\x7b\x1a\xf1\x82\x3d\x53\x40\x3c\x67\xa7\xe2\x3b\x0f\xef\x8e\x0b\xe0\x30\xe4\xd2\x13\xa9\x64\xbe\x90\x77\x71\x2a\x33\xe6\x60\x79\xf3\x26\x64\x9c\xaa\x7c\x21\x67\x65\x8e\x1f\xcf\xdb\xde\x0b\x39\xe7\xfa\xa1\xcc\x51\xd2\x93\x4c\xdb\x0e\xce\xd9\xa9\x2a\xb7\x5b\x1e\xbd\xe2\x53\x4e\xf9\xc6\xce\x53\x93\x4c\x1f\xcf\x78\x6e\x3a\x52\xa9\xe9\x29\xc1\x9d\x4f\x4e\x2c\xd5\xeb\xdc\xd3\x94\x6f\x48\x3c\x7a\xc8\x19\x2f\x76\x2e\xf5\x2a\x4f\x2e\xf1\x7c\x21\x57\x48\x1c\x43\x3c\x7f\x72\x4a\xbc\x65\xb0\xb0\x7f\xe7\xce\x3e\xeb\x43\xce\x6b\x2b\xbd\xfa\xad\xcd\x0e\xda\xec\xa0\x9b\x1d\x74\x93\x83\x06\x10\xcf\x65\xc6\x13\x85\x04\x29\xec\x8f\xf7\xe3\xb7\xf3\x88\x7f\x41\xa9\x42\x7f\x44\x2e\xf0\x0f\x2b\xe7\x0c\xf5\xf8\xd2\x20\x69\x7e\x85\x3e\x54\xc3\x9e\xae\xe0\x2f\xdd\x40\x7e\x5e\x31\xa8\x7e\x5d\x3b\xeb\x7c\x7e\x58\x62\xef\x4d\x79\xd9\xef\xe6\xad\x0e\x39\xd6\x5d\x79\x37\xdf\xfd\xa2\x86\xfd\x3e\x39\xdf\x63\x37\xb0\xff\xb3\x1a\xf6\x17\xa4\xfd\x61\x8f\x7d\x5f\x15\xfb\xbf\x96\xf6\xd5\x3e\x18\x91\x04\x35\x5e\x6a\xfc\x5f\xa9\x21\x7f\x6f\x0d\x79\x15\x27\x6b\xc8\xcb\xef\x03\xa5\xbc\xe6\x3e\x6a\xfb\x1f\x90\x77\x7d\x03\x0a\xfd\x8a\x94\xef\xac\xe1\xbf\xfb\x1e\xa8\xd2\x26\x7a\xfe\x4e\xca\x77\xdc\x60\xfc\xb1\x1a\xf2\xee\x91\xee\xd5\x1b\xc8\xbf\x5c\x43\xfe\x55\x39\x20\x02\xbe\xeb\xcb\xbf\x58\xa3\xff\xf7\xc8\x81\xe7\xc6\xaf\x43\x9e\xbb\xd4\xfe\xef\xaa\x61\xff\x0d\x79\x34\x2f\xe2\xfa\xf6\x3f\x5a\x43\x7e\x9f\x3c\x80\xbd\x7b\x03\xf9\xbd\x35\xfc\xbf\x28\xfd\xbf\xc4\xcb\xfe\x37\x56\xf1\x3f\x23\x75\xf6\x29\xf2\xb7\x46\x9c\x77\x5a\xab\x6e\xdf\x7d\x3f\x53\xc3\xff\xaf\xcb\xab\x86\xec\x0d\xfc\x9f\xab\xe1\xff\x88\x3c\x20\xba\xfb\xa4\x0e\x79\xae\x55\xfd\xdf\xcd\xaa\xdb\x6f\x97\x0c\x79\x65\xc0\xab\xf3\x67\x27\xab\x6e\x3f\xd6\xe3\xbc\xbd\xf3\xbf\xb9\x8a\xfd\xd6\x1a\xed\x3f\x27\x37\x14\xe3\xda\xf5\xed\x37\xd7\x68\xff\x8c\xb4\x6f\x6a\x65\xfb\x2d\x55\xec\xb7\xd4\x68\xff\x82\xfc\x48\xa7\xea\x55\xe7\x7f\x53\x8d\xf6\x9f\x5f\x5f\x29\xdf\x21\xdb\xaa\xda\x0f\xd4\xb0\xbf\x55\x5e\xf9\xa4\x6e\x30\x7f\x79\x0d\xfb\x6f\x4a\xfb\x97\x3c\xf6\xdb\xaa\xd8\x9f\xad\x31\x7e\x9f\x96\x17\x10\xbf\x87\xea\xf6\xdd\x37\x9d\xe3\xf8\xfe\xc5\x8c\x67\x8b\x2f\x9e\x33\x32\x7f\x06\x3c\xf6\xab\xf9\xbf\x8d\x79\xfe\xf9\xd5\xf3\x6c\x95\x57\x5b\x17\xb4\xb2\x9c\x77\xfc\xb8\xfb\xcd\xff\x0a\x00\x00\xff\xff\x04\x02\x35\x7c\x20\x32\x00\x00")

func bindataAssetsEbpfmoduleOBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsEbpfmoduleO,
		"assets/ebpf_module.o",
	)
}



func bindataAssetsEbpfmoduleO() (*asset, error) {
	bytes, err := bindataAssetsEbpfmoduleOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/ebpf_module.o",
		size: 12832,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1743497161, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAssetsRock5b510arm64minBtf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\xb1\xca\xc2\x30\x18\x45\xcf\xf7\xff\xa9\x16\x5c\x3a\xba\x19\x1c\x5c\x1c\x15\x67\x1f\xc1\x37\xc8\x62\x09\x05\x89\x62\xdb\x77\x71\xf3\x01\x7d\x09\x49\x73\x45\xfc\x20\x09\xb9\x27\x39\xf7\xf9\x32\x96\x94\x79\x68\xed\x00\x2b\x91\x39\xc0\x83\x55\xe5\x5e\xff\x03\x0b\xb1\x1a\x38\x02\x6b\xb1\x3f\x79\x0c\x5c\x63\xb0\x01\x66\xfc\x4c\xfe\x8e\x93\x7f\xf5\x7d\x5f\x35\x2a\x54\x0f\x5b\x79\x4e\xca\xe7\x1f\x43\x97\x06\x42\x18\x0f\x7b\x2e\xd7\x14\xfd\xb4\x8d\xa9\xef\x62\x6a\xcf\x3e\xc3\x8c\xee\x6d\xec\xb9\x0d\x61\x3a\xdf\x01\x00\x00\xff\xff\xf4\x6a\x4f\x49\xe3\x00\x00\x00")

func bindataAssetsRock5b510arm64minBtfBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsRock5b510arm64minBtf,
		"assets/rock5b-5.10-arm64_min.btf",
	)
}



func bindataAssetsRock5b510arm64minBtf() (*asset, error) {
	bytes, err := bindataAssetsRock5b510arm64minBtfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/rock5b-5.10-arm64_min.btf",
		size: 227,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1743497162, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"assets/a12-5.10-arm64_min.btf":    bindataAssetsA12510arm64minBtf,
	"assets/ebpf_module.o":             bindataAssetsEbpfmoduleO,
	"assets/rock5b-5.10-arm64_min.btf": bindataAssetsRock5b510arm64minBtf,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"assets": {Func: nil, Children: map[string]*bintree{
		"a12-5.10-arm64_min.btf": {Func: bindataAssetsA12510arm64minBtf, Children: map[string]*bintree{}},
		"ebpf_module.o": {Func: bindataAssetsEbpfmoduleO, Children: map[string]*bintree{}},
		"rock5b-5.10-arm64_min.btf": {Func: bindataAssetsRock5b510arm64minBtf, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
