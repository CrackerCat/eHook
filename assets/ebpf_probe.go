// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/a12-5.10-arm64_min.btf
// assets/ebpf_module.o
// assets/rock5b-5.10-arm64_min.btf

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAssetsA12510arm64minBtf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9a\xff\x9a\x91\x41\x82\x01\x15\x30\x82\x08\x40\x00\x00\x00\xff\xff\x80\xcb\x0c\x29\x19\x00\x00\x00")

func bindataAssetsA12510arm64minBtfBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsA12510arm64minBtf,
		"assets/a12-5.10-arm64_min.btf",
	)
}



func bindataAssetsA12510arm64minBtf() (*asset, error) {
	bytes, err := bindataAssetsA12510arm64minBtfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/a12-5.10-arm64_min.btf",
		size: 25,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1743341361, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAssetsEbpfmoduleO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x0d\x70\x5c\xc5\x7d\xff\xed\xbe\xf7\xee\x53\x1f\x27\x9d\x25\x9d\x6c\xf9\xf4\x2c\x59\xf2\xf9\x83\xb3\x24\x04\xb8\x18\x88\x6c\xb0\x91\x1c\x43\x84\x3f\x88\x4d\x4a\xce\x27\xe9\x59\xba\xfa\x74\x77\xdc\x87\x73\x16\x10\x94\x04\x12\x27\x21\x19\xd2\x49\x26\x6a\xc2\xc4\x76\x02\x1d\x91\xf4\x43\x1d\xd2\xe2\x49\x69\xed\x49\xe9\xd4\x9d\xd2\x0e\x4d\xdb\x19\x37\xc9\xb4\xa4\x43\x53\x4f\x69\xa7\x64\x42\x8b\x1b\x08\xea\xfc\xf7\xed\xbb\x7b\x5a\xdd\xd9\xa4\x93\xbc\x19\xf9\xed\xef\xff\xfd\xdf\xdd\xb7\xff\xdd\x3d\x3f\xb6\x67\xff\x5e\xce\x18\x9c\x87\xe1\x2d\x54\x51\xf5\x59\xdc\x54\x6d\x8f\xc8\x7f\x4d\x30\x5c\x68\xb7\x69\x11\xbe\x52\x3e\xa2\x01\xcb\xcb\xcb\xcb\x15\xac\xaf\xe4\xbf\x60\x00\x44\x7a\x02\x40\x27\x80\x0b\xc9\xf7\x6e\xc7\xb8\x86\x9d\x17\x3c\x36\x7d\xf2\x37\xde\x11\x3a\x17\xbe\x6e\x63\x2f\x07\xde\x59\x5e\x5e\x8e\x28\xc9\x3d\x21\x72\x06\x0e\xcb\xac\x0d\x04\x6d\xbb\xcc\xa6\x4f\x86\x1c\x7b\x57\x57\xd9\xbb\x7a\x0d\x7b\x6d\xe0\x15\x3b\x93\x00\x0a\x21\xbb\x03\x5e\x90\x72\x5f\x92\x6f\xa7\xff\x5e\xf0\x4a\x3f\x73\xbf\x58\xdc\x6d\xe8\x92\x7a\x6f\xae\xd2\x7b\xf3\x3d\xe5\xbb\xa6\xd2\x8f\xf4\x3c\xc4\xec\x38\x0b\x6b\xdf\x16\xf6\xda\x98\x6f\x05\xff\xc2\x39\x69\x9f\xd9\x71\x5d\x68\xb5\x71\xf3\x01\x49\x37\x6c\xfb\x0f\xf5\xd8\xf8\x30\xb7\xed\x5c\x78\x46\xf2\x75\xe0\x6d\xd2\x7b\x8f\xe3\x5d\x19\x57\xa5\xdf\xee\x1e\xdf\x8f\x77\x5d\x72\xbf\xaa\xa7\x5c\x2e\x97\x31\x31\x31\x31\x81\x1e\x46\xbd\xe5\x43\x33\x80\xdb\x00\xec\x03\x70\x10\xc0\x83\x00\x72\x00\xe6\x00\x7c\x0e\xc0\x97\x01\x3c\x0b\xe0\xdb\x00\x5e\x04\xf0\x32\x80\x7f\x00\xf0\x6f\x00\x38\xcd\x2a\x43\x87\x8f\xdd\xa7\xfb\x16\x18\xbb\x9f\x50\xa5\x31\xcf\x9e\x62\xec\x10\xb5\x16\xd8\x59\xc6\x07\xce\xe8\x67\xd9\x59\xce\xe7\x74\x22\x5d\x62\x0b\x9c\x8d\x53\xeb\x0a\x7b\x43\x30\xdf\x60\x4b\x9c\xcf\x09\x83\x0b\x7c\x49\x30\xbd\xd2\xf4\x79\x4e\x16\xbd\x7a\x28\x42\x82\x91\x51\x3e\xd7\x40\x70\x64\xd4\x16\x1a\x1d\x27\xf2\xf8\x22\x13\xb6\xbd\x7a\x79\x91\xd9\x0c\xf2\xcb\xee\xd3\xcf\xb2\x45\xce\xe7\x82\x44\x39\xcb\x2e\x32\x6d\x2e\x78\x46\xbf\xc8\x2e\x33\x7f\x09\x2d\x6c\x2e\xd8\xd3\x73\xa6\xc2\x6a\x81\xcd\xf2\x10\x8b\xe8\x2d\xac\xaf\x2f\x6c\x68\x7d\xf9\x8e\x50\xc7\xba\xbe\x16\x76\xb8\xb7\xd0\x51\xec\x78\x92\x75\x00\x7c\x18\x5a\xdf\x58\xf8\x7d\x9d\xb7\x06\x77\x06\x79\x04\xd0\x18\x1b\x0b\x03\xfa\x06\x8c\x85\x6f\x09\x02\xc6\x46\x68\x7d\x77\x04\x83\x41\xc0\x43\xcd\x60\xf0\x8e\x20\xe0\x6d\xc7\x58\x58\xeb\x23\x25\xc0\x17\x66\xc1\xa0\xdd\xf4\x37\x0a\x73\x04\x76\x04\x81\x40\x33\xc8\x58\x50\x18\x33\x80\x86\x30\x23\x0b\xb6\x6c\xe3\xb0\x23\x6b\x00\x4d\x6d\x6c\x2c\xbc\xa9\x13\x68\x36\x84\x4a\x88\x86\xb4\xa5\x22\x11\x04\x5a\xfb\x01\x84\x75\x36\x16\x16\x06\x0c\x60\x4d\x0c\x5a\x5f\x57\x33\xd0\x16\x67\x76\x2c\x9b\x3a\xcd\x0d\x0c\x68\x37\x60\x63\xb2\xd4\x11\x64\x40\x64\xd8\x45\xe9\x14\x51\x18\xb6\x91\xb5\x8d\xb0\x63\xa0\x78\xd7\x75\x30\x87\xde\x55\xc9\x44\x70\xd6\x87\x2b\x9c\xa8\x8b\x63\x00\xdd\x71\xd6\xb2\xae\xd5\x33\x12\x99\xeb\x74\x82\xa0\xfe\x04\x4c\x03\xbc\xa7\xea\x75\xc3\x7a\x36\x18\x3e\xdc\x7b\x24\x78\x34\xf8\xc1\x20\xd0\x43\xdc\xc1\x30\xd0\x4b\x74\xb2\xe0\x70\x36\x1a\xe0\x11\xe2\xf4\x05\xd9\xe1\x5e\xa0\x7f\x58\x4a\x6e\xaa\xa6\x39\x16\x16\x89\xc6\x82\xc2\x37\x80\x3f\x15\x6b\xb0\xbd\x30\x30\x34\xc8\x16\x4d\x6f\xe7\xab\xf1\x10\xa5\x41\xfe\x71\xed\x56\xa2\x69\xfc\x1c\xb4\xbd\x00\x74\xfa\x72\x74\x18\xba\x87\x79\x0c\x9f\x97\x7b\x8e\x12\x5b\xe7\xe7\x98\x97\x16\x05\x1f\x0b\x19\x5e\xaf\xce\xfd\xf4\x51\xf1\x00\x3f\xc7\x7d\x26\x37\xfc\x81\xdf\x22\xe8\x81\xbf\xe1\xf7\xa8\xe1\xf5\xf9\x1b\x2f\x52\xc3\x17\xf2\x37\xfd\x39\x35\xfc\x11\x04\xbe\x46\x7e\xbe\xe9\xf2\x11\x34\xf4\xc0\xf3\x0e\x31\xb8\x4f\x38\x42\x80\x40\x80\xbc\xf2\x66\xfa\x32\x79\x0b\x3f\xa7\xf9\x4c\xde\x20\x9d\x34\x3a\x4e\x9a\x1c\x27\xcd\x8e\x93\x50\x04\x3c\xe4\x67\x80\xe6\xe5\xe7\x74\x9f\xa9\x79\xfd\x81\x21\x01\xe1\x6f\xb8\x53\x34\x7c\xfe\xc6\x43\xa2\x11\xf2\x37\x25\x45\x23\x82\xc0\x2d\xcc\x1d\x98\x07\x81\xd1\x15\x04\x86\xc0\x51\x06\x78\x29\xa6\x16\x16\x0d\x1c\x67\x40\xc3\x1a\x9f\xa6\xf9\x5b\x49\x46\xd3\xe1\x0f\x53\xd7\x69\x86\x8e\xc6\xb6\x4f\x31\x40\x5f\xe2\x81\x27\x19\xd0\xf4\x2d\x06\x34\xff\x7e\xe5\x9f\xa5\x15\x2d\x18\xed\x86\x2f\xe4\x3d\x4f\xb3\x92\xad\x31\x3a\xbc\xbe\x96\xce\x97\x48\xfb\xc6\xc0\x5f\x92\x72\x55\xef\x1f\x49\x3a\xf0\x4f\x0c\x68\x0d\xd3\x28\xe8\x6c\xf9\xa1\x35\x6b\x69\x25\x6e\x5e\xb3\xce\x7e\x75\x01\x6d\xeb\x35\x7f\x7b\x54\xf3\x6f\xe5\x40\x47\x64\x50\x6b\xa0\x80\x23\x43\x5a\x03\x25\x2a\x28\x8d\x92\xd2\x28\x28\x08\x0c\x70\xa0\x73\x60\x9c\xb1\x39\x7d\xed\x08\x07\xd8\xc3\x3a\xd6\x85\x18\x7b\x58\xef\xea\x7e\x8d\xf0\x23\x3a\xd6\x1e\xa5\xc6\xa3\x3a\xd6\x87\x18\x7b\x54\xef\x32\x7b\x34\x80\x7d\x54\x47\xd7\x86\x38\xb5\x1e\xd3\xaf\x46\x7b\x44\x6b\x5e\x07\x8b\xf6\x8a\xe6\xc7\x74\x1f\x03\xa2\xfd\x02\x3c\xae\x87\x58\x74\xd3\xcd\xd4\x7c\x42\x8f\xb0\xe8\x16\xea\x4d\xf6\x49\xbd\x8b\x45\xb7\x0a\x81\x4f\xe9\x26\x8b\x6e\x13\xcd\xd3\x7a\x8c\x45\x6f\xd8\x4b\xcd\x4f\xeb\x03\x2c\x1a\x17\xd4\xcf\xe8\x23\x2c\xba\x5d\x34\x3f\xab\x8f\x32\x74\x6e\x0c\x31\x56\xd0\xbb\xcc\x76\x22\x15\x29\x16\xea\x50\x56\xa2\x58\x44\xeb\xa4\x88\x45\x34\x3f\x42\xb1\x68\xd4\x14\xa3\xd9\x0d\x8d\x0c\xc9\xb6\x97\xe8\x7d\xac\xc7\x7b\x87\x06\x6c\x66\x5d\x5e\x1a\xd1\x18\x6b\xaa\xca\x70\xb4\xdd\xc8\xfb\xda\x87\x79\xdf\xb4\x06\xb4\x47\x79\x1f\xf5\x2f\x02\x34\xe2\xdd\xc6\x08\x79\x78\x60\x27\x84\x9e\x89\x28\xbc\xc4\xdd\xf0\x33\xd1\xbf\x3e\xa3\x87\xbd\xcb\x80\xde\x03\x1a\xe0\x19\xa7\x29\x12\x34\x7a\xf8\xfd\x1a\xb0\x91\xdd\xff\x61\x0d\xe4\xba\x5f\xa3\xdd\x40\xbf\xde\x4c\x56\xfb\x78\xbf\xd1\x49\xd0\xb3\xc1\xfe\x5c\xdb\x6e\xd2\x42\xed\x51\x2d\x44\x56\x23\x37\x6b\xad\xe4\x35\x72\x8b\xd6\xf2\x4d\x39\xa2\x2d\x72\x44\x5b\x2a\x63\xdc\x2a\x29\xad\xf6\x18\x6f\xda\xc1\xbb\x48\xb8\x7d\x98\x77\x51\x02\x91\x5f\xe3\xeb\x6d\xe5\x5b\x79\x94\x08\x40\xb7\x77\x87\xc8\xe2\x36\x34\x8a\x2c\xbc\x51\x34\x8a\x2c\xfe\x46\x03\x34\x34\x19\xfd\x0d\xdf\xd7\x80\x3e\xbd\xdf\xf7\xba\x06\xf4\xfb\x7f\x2a\x22\x37\xfa\x03\x3f\x27\x18\x34\x68\x53\x22\x72\xf4\x9d\xa6\x1c\xc3\xc6\x46\xed\x0b\xc1\x33\xae\x34\x7b\x9b\x75\xc0\x37\x4a\xbd\xd9\x7f\xa7\x60\x76\xe8\x40\x7f\x53\xb7\x0e\xc4\x04\xbd\xbf\x31\x56\xd9\x83\x96\x60\xd7\x72\xda\x74\xd1\xfe\x29\x06\x80\x16\xa9\xbb\x01\xdc\x07\xe0\x01\x00\x53\x10\xa5\xd5\xb7\xc8\xf4\x25\xb6\xc4\xed\xb2\x2c\xc0\x15\xa6\x5f\x65\xf3\xdc\xae\xc5\x57\x99\x3e\xcf\x89\xed\xd5\x43\xa6\x1e\x5b\xac\xb4\x46\x45\xa5\x3d\xa2\x1f\x5b\x60\xd0\x8c\x8b\x5c\xf3\x9e\xe7\xb8\x8a\xea\xf6\x95\x76\xd4\xbb\xc5\x56\x0c\x48\x48\x87\x65\x00\x1f\x03\xf0\x79\x00\x5f\x04\xf0\x55\x00\x67\x01\xd0\xee\x69\x49\x6e\x2a\xbe\x03\xe0\xcf\x00\xfc\x35\x80\xbf\x05\x70\x19\xc0\x8f\x00\x5c\x01\xf0\x2e\xf5\x0e\x55\x25\x06\x74\x31\x60\x80\x01\xbb\x18\x70\x90\x01\x16\x03\x66\x19\x6d\xf1\x80\x87\x19\x30\xcf\x80\x4f\x30\xe0\x93\x0c\xf8\x1c\x03\xbe\xc2\x80\xaf\x31\xe0\xb7\x19\x40\x73\xf6\x8f\x18\xf0\x1d\x06\x7c\x97\x01\xdf\x63\xc0\x0f\x18\xf0\x63\x06\xbc\xc5\xec\xa5\xde\xc7\x81\x10\xb7\xb7\x70\x7d\x1c\xd8\xcc\x81\x41\x0e\x0c\x73\xe0\x66\x0e\xbc\x8f\x03\x77\x72\x60\x0f\x07\xee\xe3\xc0\xe1\x89\x52\xa6\x58\x32\x27\xd3\xc9\xcc\xb4\x79\xd2\xca\x17\x52\xd9\x8c\x39\x38\x1c\x1f\x88\x0f\xdc\x30\x58\x12\xcc\xc1\xf8\x20\x4a\x05\x2b\xbf\x3d\x95\x99\x4c\x97\xa6\xac\xed\xd6\x44\xee\x78\x62\x36\x3b\x55\x4a\x5b\xf1\x49\x6c\x9f\xcd\x14\xb7\x4f\x6d\x3f\x38\x93\xca\x64\xb7\x5b\xa3\xd9\xec\x09\x24\x12\xe9\xd4\xa4\x95\x29\x58\x98\x9c\x49\xe6\x91\x48\xec\x3a\x70\x60\xd7\xd1\xc4\xc1\xb1\x07\xf6\x24\x0e\x1d\x1d\xdf\x93\x48\x20\x21\x7d\xa1\x94\x29\xa4\xa6\x33\xd6\x94\x99\xca\x14\x91\x48\x94\x6e\x1c\x82\x75\xd2\xca\x14\x0b\x28\x9e\xca\x59\x20\xea\x6c\xb2\x9c\xb0\x32\xc5\x7c\xca\x2a\xe0\x84\x75\x0a\x27\x93\xe9\x92\x85\x74\x76\x3a\x31\x9b\xcc\x15\x6c\x71\x6a\x82\x94\x0b\xc9\xd9\x5c\xda\x92\xaf\xa1\x01\x4c\x25\x8b\xc9\x44\x11\x14\x72\xce\xca\x1f\x4f\xd8\xd2\xd9\x52\x31\x57\x2a\x22\x9d\xcd\x4c\x57\x23\x20\x24\xfe\xa1\x38\x6e\x1e\x16\x3a\xb3\xc9\x5c\x22\x9d\xcd\x9e\x28\xe5\x12\x56\xda\x9a\xc5\xee\xf1\xbd\x89\xbd\x89\xb1\x7b\xef\xda\x73\x24\x71\xcf\xae\x83\xef\x97\x84\x3b\x0f\x1f\x38\xb0\xe7\xde\x43\x89\x3b\xc7\x0f\x3b\x94\x43\x47\xf6\xef\xb9\xd7\x96\xc9\x66\xf6\x64\x8a\x56\x1e\x93\xc5\xb2\xe8\xc9\x44\xde\x9a\x2e\x40\xfc\x53\xc8\x21\x37\x89\x5c\xa1\x98\x2c\x5a\x36\x2f\x57\xb4\xd9\x14\x41\x36\x9f\x9a\x4e\x94\x07\x50\x38\x55\x98\x4c\xa6\xd3\x99\x2c\x12\x89\x02\x25\x79\xe3\x10\x4a\x99\x52\xc1\x9a\x1a\xb2\x65\x92\x53\x53\xf9\x44\x3a\x35\x9b\x2a\x22\x37\x9b\x4f\x14\x92\x27\x2d\x14\x8a\xc9\xc9\x13\xc7\xf3\xc9\x59\xea\xab\xc9\x13\x53\x56\x2e\x31\x93\xcc\x4f\xa5\xf2\x0f\x15\x60\x95\x53\xc5\x44\x7e\xb2\x04\xc7\x5b\x22\x91\x98\xb3\xf2\x64\x3f\x41\x3d\x26\x7a\x37\x45\x41\x67\x92\x69\xe4\x8a\x79\x64\x33\xfb\x2d\x61\x75\x08\x24\x5d\x28\xe6\xd3\x56\x06\xf4\x97\x42\x2e\x9f\x9d\xb0\x68\x88\xac\xbc\x6c\xa7\x85\xec\x7e\xf9\x45\xff\xa2\xcf\xa8\x82\xcf\xca\xf7\x99\xd7\x19\x22\x0e\x4d\xb7\xff\x4a\x5a\x45\x8c\x6b\xf2\x1c\x45\x2f\x5d\x2c\xcc\x95\x63\xb3\xe6\x6c\x85\x74\xf9\x67\xac\x94\xab\xd8\xf0\x54\xdb\x2b\x74\x50\x3d\x2b\x73\xd7\xf1\x88\xfb\xe5\x59\x88\xd6\xfd\x80\xa8\x2d\xab\xed\xea\x80\x4e\xed\x6d\xd5\xf8\x30\x28\x63\xa0\x73\xfb\xed\x74\x06\x03\x30\x0f\x60\x17\x19\x02\x70\x51\xae\x7c\x00\x9a\x82\x2e\xbd\xff\xaf\xad\x7b\xa5\xad\x46\x97\x9e\xd8\x3c\xd5\xc9\xd7\xd5\x0f\xbc\xb5\x8e\x8c\xdb\x0e\x9d\x58\x3f\x28\xfb\xc1\xef\xa2\xd3\x51\xfa\x43\xb6\x8e\x4e\xb1\x4c\xb8\xb6\xa4\x29\x2a\x48\xb2\x9f\xf2\xb2\xdf\x98\x1d\x33\x53\x73\x6d\x76\xe5\xda\xe2\xca\x35\xec\xca\xb5\x4d\xe6\xfa\x11\x99\x6b\x44\x89\x71\x9d\x5c\xc8\xfd\x80\x3e\x2e\x19\x5d\x92\xf9\x69\x00\x74\x3c\x9e\xf7\x01\x5f\x00\xb0\x91\x6c\xf9\xec\xc5\x9e\x72\x7b\xd5\x07\x7c\x43\xca\x90\x81\xe7\x65\x7b\xc4\x6f\x9f\x28\xe9\x70\x32\xef\x07\xfe\xc2\x91\x09\xd8\x45\x40\xc8\x04\x64\x00\x80\x11\x62\x76\x61\x58\x5f\x8d\x0b\x1b\xe4\xfb\x75\x99\x33\xc9\x5c\x75\xcd\x9f\x9f\x03\x88\x52\x3c\x5e\x3b\xa1\x28\xec\x4e\xd2\x64\x7b\xc4\x07\x04\xec\x7c\x7c\x34\xff\x42\x76\x5b\x1c\x01\x46\x94\xb1\x8b\xca\xb1\xeb\x76\xcd\x27\xc7\x5f\xaf\xcb\x5f\x8f\xcb\x5f\x8f\xcb\x5f\x8f\xf4\xd7\x2b\xfd\x45\x15\xfb\x3d\x2e\xfb\x9b\xa4\x4c\x1f\x80\xad\xb2\xcd\xeb\xc8\x3b\x74\x06\x34\x52\x7b\x90\x01\x6b\x01\xdc\x64\xdf\xf9\x34\x6c\xaa\xc3\x7f\x8e\xdb\xfc\xcd\x8a\xdd\x0e\xd7\xb7\xbe\xdf\x5e\x23\x9a\xb6\xca\xf9\x70\xbf\xc4\x7e\x89\x13\x62\xc3\x63\x4f\xb1\x06\x69\x84\xfa\xbe\xc9\xd5\xee\x74\xb5\x2d\x4d\xe8\x09\xf9\x6d\xd5\x7e\xc4\xac\x8b\x7e\x83\x8b\x0e\xbb\xb6\xd5\xa8\x82\xa2\xde\xad\x28\x81\xa2\xea\xd5\xae\x78\xb2\x2e\x56\x0a\x1f\xe9\xca\xf2\xa6\x56\x3d\x51\x77\xab\x85\xd1\x59\xe5\x57\xd7\x93\x5f\x4e\x15\xa9\x16\xb5\x15\x25\x6c\x75\x85\xb3\x0b\x6b\x8d\x8a\x4b\x64\xaa\x6a\x76\x7d\xa3\x42\xe9\x2e\x2a\x25\x01\xb6\xbb\x49\xab\xb7\x1d\xdb\xaf\xb1\x49\x49\x65\x8a\xa6\x4b\x3b\x56\x28\xe6\x4b\x93\x45\x53\x06\xba\xc5\x9c\x2c\x96\x37\x9b\x0f\x5f\xd7\x68\x3c\x2e\x70\x7c\x12\xa6\x69\x9a\x07\x0f\xef\xbe\x67\xec\x50\xac\xa7\x5c\x2e\x97\x7b\xb6\x99\xc3\x9b\x77\xbe\x17\x03\x95\x00\x89\x1b\x9f\x11\x96\x6a\xee\x4e\x62\x93\xc5\xf2\x36\xb3\xdf\x19\xee\x6d\xe6\xaa\xad\xc6\x36\x33\x57\xcc\x6f\x33\x9d\x6a\x1c\xcb\x15\xf3\x9b\x37\xef\xb4\x63\xdb\x73\x28\x66\xcf\x86\x6d\xe6\xe0\x2a\xda\xd0\xc0\x36\x73\xd3\xe4\x26\x49\xcf\x5b\xc5\x52\x3e\x63\x0e\xec\x5c\x51\xbc\x57\xf4\xb9\x4d\xaa\xf6\xa2\xc0\xf5\x7a\x91\x6c\x92\x68\xc1\xbc\xdd\xbc\xbb\xe2\x53\x3a\xa3\x99\x69\x16\x86\x56\xb0\x86\x06\x24\xf3\x78\x36\x1f\x13\x02\x5b\x52\xe6\xed\x94\xdc\x4e\x6a\x6d\xb8\xdd\x1c\xd8\x69\xa6\xb6\x6e\x25\xe3\xd5\xbd\x65\x65\x0b\x19\x17\x5f\x83\x43\x76\xa8\x72\xbf\xe0\xac\xa1\x1b\xe5\xdf\x33\x0c\xb8\x24\xd7\x7e\x5a\x1f\x77\xb1\x6a\x8d\xa0\x13\xc7\x1f\xf2\x2a\xde\x42\x6b\xa9\x94\x91\x4b\x38\x0e\x31\xe0\xe3\xcc\x2e\x1c\xa4\xff\x1c\x03\xfe\x8e\x01\x46\xcc\xde\xb7\xfc\x3b\x03\xd6\xd3\x42\xbf\x00\x2c\x48\x7e\x96\xf0\x00\xb0\x28\xf5\x9d\x67\x49\xe1\x5f\x91\xf8\x13\x84\x87\xed\x35\xf9\x39\xf7\x5d\x31\x5b\xc9\xa7\x83\x04\xd9\xfb\x2a\x17\xd7\x74\x22\xf6\x66\x57\x9c\x97\x68\xa1\x1c\xb6\x73\x20\xbd\xff\xe2\x40\xe3\x5d\xf6\x1a\xe6\x8e\x23\xa6\xf0\x47\x25\xf6\xd1\xa2\x38\x0a\x1c\x51\xe2\x38\xa6\xf0\x17\x5c\x38\x30\x6a\xef\xd7\xa8\x1f\xfa\x34\xc0\x28\xdb\x35\xd9\xc1\x91\x32\xf0\x8a\xc2\xbf\xac\xf0\x5f\x55\xf8\x6f\x28\xfd\x1a\x73\xe7\x7d\x9b\xbd\x66\x2f\x2f\x2f\x2f\xeb\xf0\xc1\xf7\x48\x50\xde\x9e\x57\x9f\x11\x19\xbb\x4a\xdf\x21\xe9\x63\xf2\x16\xf9\xcb\xe2\xa6\x8b\xbd\xdd\xd4\x08\xc6\xc4\x4e\x84\x26\x07\x63\xdd\x62\x11\x0f\xcb\xd5\x7f\x87\x38\xce\x75\xf3\x66\x23\x6a\x88\x9d\xea\x3d\x97\x37\x1a\x7b\x4f\x3f\xff\xaf\x4f\x7f\xe3\x65\xf6\xd1\xef\xdd\xf5\xdf\x93\xa4\xf8\x83\xb5\xe6\x0f\x3f\x50\x9e\x99\x3d\xdf\xf8\xe1\xed\xf3\xfb\x7e\x37\xf2\x10\xd5\xb8\x17\x16\x9f\xcc\x87\x5e\xbe\xf4\xd3\x97\x5e\xfa\xfe\x57\x1e\x3e\xf3\xf4\xd7\x4f\x91\xa9\x2d\xdf\x9a\xe9\xfd\x51\x53\xcf\xc9\x7d\x8f\x0d\xbf\xf4\x93\x67\x0f\x3d\x4a\xbb\x19\xf6\xcf\xaf\x7c\x76\xe3\x83\x43\xb7\x8c\x7c\x68\xe6\x2d\xfd\x94\xf9\xb3\x19\x1d\xf0\x57\x4a\x67\x44\xd7\x0c\x23\xd0\xab\x73\xad\xeb\xe3\x1e\xed\x81\xa7\x74\xcd\xa3\x35\x98\x1e\xad\x68\x6a\x0d\x71\xad\xb8\x4f\x6b\x88\x7b\x36\x78\xb4\x82\xa9\x35\xc6\xb5\xc2\x3e\xad\xd1\xd4\xe1\xe9\xe2\x1c\x8c\xad\xb0\xa3\x35\x30\x5d\x33\x1a\x03\x43\x1e\x2d\x6b\x6a\x2d\x71\x2d\x7b\x9b\xd1\xec\xd1\x5a\x4d\x8f\x96\x31\xb5\xd6\xb8\x96\xd9\xa7\xb5\xc6\x8d\x80\xa9\x73\xc3\xb0\x5d\x4c\x98\x5a\xd4\x34\x22\x71\xc3\x88\x1b\x11\xd3\x30\x4c\x6d\xc2\xf4\x68\xfd\xa6\x0e\x2d\x55\x14\x1e\x6a\x9c\x07\xdd\x4b\x20\xea\xac\x87\x2a\xfd\x5a\x47\xce\x93\xb3\xe9\x54\xa6\x54\x4e\xdc\x34\x38\x10\x9f\x81\xb3\x90\xca\x95\x99\x24\x67\xac\x74\xce\xca\x27\xa6\xac\xe3\x85\xf8\x0c\xea\x3e\x1b\x19\xd5\xe7\x9f\xd4\xfc\xbd\x42\x83\xb6\x8a\x96\x61\x36\xe7\xb2\x42\x3f\x26\xe9\x03\x35\x7e\xa4\xd3\x56\xfc\x32\x66\x3f\xef\x17\x72\x86\x98\xc7\xee\x67\x5a\xd2\x4f\x2b\xf2\x07\x24\xfd\x8a\x42\x3f\x2a\xe9\x17\x6b\xc6\x1f\xa8\x41\x25\x7a\xb0\x0e\xbd\xa1\x0e\xbd\xb9\x0e\x3d\x54\x87\xde\x5a\x87\x1e\xae\x43\xef\xac\x43\x5f\x57\x87\xbe\x7e\x15\xed\x4b\x00\x5a\x5d\xe3\xe5\x7c\xef\x7f\x20\xce\x0a\xfe\xca\x1e\xd8\xa9\x05\xc7\x24\xdd\x54\xe8\xff\x29\xec\x54\xc7\xcb\x59\x1f\xfe\x57\xc8\x7b\x2b\x74\xe7\x28\xf8\x57\x82\xee\x5b\x45\xdf\x2d\xed\x43\xb1\xef\x48\x32\x79\x56\x89\xb9\x30\x8d\xd6\xb8\x0b\xb7\xcb\x5f\xb0\xdc\xfc\x25\x45\xbf\x72\xd8\xad\x61\xaf\x4d\xe6\x59\x4f\xbe\xdd\x15\x8f\x26\xf7\xbd\x2d\x2e\xdc\xe4\xe8\x48\xdc\xea\x3a\x1f\x68\xb2\x2e\x6e\x72\x61\x3a\x57\x6e\x75\xe1\xa0\x62\xbf\xd9\xb5\xb7\x76\x70\x48\xc1\x6b\x14\x1c\x51\x70\x97\x82\x4d\x05\x6f\x54\x70\x4c\xc1\xdb\x14\x3c\xa0\xe0\x61\x05\xef\x50\xf0\x6d\x0a\x1e\x51\xf0\x5d\x0a\x1e\x55\xf0\x7e\x05\x8f\x2b\xf8\x90\x82\x8f\x28\xf8\xd7\x15\x7c\x4c\xc1\x53\x0a\x9e\x51\x70\x5a\xc1\x39\x05\x17\x15\x5c\x56\xf0\x23\x0a\x9e\x57\xf0\xe3\x0a\x3e\xad\xe0\x27\x15\xfc\x94\x82\xbf\xa8\xe0\x05\x05\x3f\xad\xe0\xb3\x0a\x7e\x46\xc1\x8b\x0a\xfe\x1d\x05\x2f\x29\xf8\xdb\x0a\x3e\xaf\xe0\x17\x15\x7c\x51\xc1\x2f\x29\xf8\x92\x82\x5f\x56\xf0\x2b\x0a\xfe\x7b\x05\x5f\x56\xf0\x0f\x15\xfc\xaa\x82\x5f\x53\xf0\x15\x05\xff\x87\x82\xdf\x50\xf0\x9b\x0a\xbe\xaa\x60\xf7\x4f\x8a\x11\xd7\xf7\xcb\xe5\xf9\x38\xe2\xc2\x6b\x5d\xdf\x27\x97\xeb\x4d\xcc\x85\xdb\x5c\xdf\x1f\x97\x7f\x3b\x14\x3c\xe2\xc2\x86\xeb\x7b\x72\xf0\x8c\x5c\x70\x75\xe9\xaf\xe8\xc2\xe4\x6f\xde\x85\xc9\xdf\x82\x0b\x53\xac\x4b\x2e\xdc\xa9\x9c\xe5\xb9\xeb\x7b\x77\xee\x0b\xc7\x15\xfe\x31\x05\xe7\x14\x3c\xaf\xe0\xa7\x14\x7c\x56\xc1\x4b\x0a\xbe\xa8\xe0\x57\x14\xfc\xaa\x82\xaf\x2a\xf1\xfa\xd8\x4a\x1c\x51\x70\x4c\xc1\x3b\x14\x3c\xaa\xe0\x23\x0a\x9e\x51\x70\x59\xc1\xa7\x15\xbc\xa0\xe0\x45\x05\x9f\x57\xf0\x25\x05\x5f\x56\xb0\xbb\x5e\xb4\x28\xf3\x8f\x2b\xeb\x7d\x8b\x32\xdf\x0c\xe7\x9e\x4e\xf2\xc3\xf2\x0e\xcf\x8d\xb7\x28\x38\xae\xe0\x5b\x15\xfc\x01\x05\x4f\x29\xf8\x94\x82\x3f\xaf\xe0\x45\x25\xfe\x37\x94\x78\xd7\x74\x44\x3a\xd7\xb6\xb7\x21\x3e\x65\x4d\x94\xa6\x13\xc9\x89\x89\xbc\x75\x12\xf1\xa2\x55\x2e\x22\x9e\xb7\xd2\xf1\xdd\x87\xf6\xc6\x05\xb0\x05\xf2\x99\xe9\x74\xaa\x50\x2c\x38\x38\x9d\x9d\xb4\xb1\xbc\x49\x12\x3a\x36\xab\x50\xcc\x27\xb2\xc7\x8f\x17\x2c\xf7\x05\x93\x7d\xb0\xae\x4a\x54\xec\xa4\x32\x96\x8d\xf3\x56\xba\xc6\xdd\x8c\xcb\x6e\x72\x6a\xca\x7d\x11\xe5\xe2\xa4\x32\xc7\xb3\xae\x33\x7c\x3a\x7d\x72\x56\x48\x17\x52\xd3\xab\xed\xda\xf7\x0f\xd5\xb3\xbf\xcb\x0e\x05\xe3\xc6\xf6\x5d\xd5\xca\x03\x43\xbc\x50\xcc\x17\x93\x13\x88\x17\x4e\xcd\x8a\xb7\xec\x2c\xec\xdf\xbd\x7b\x30\x71\x8b\xfd\xba\xd9\x7e\xdd\x44\xaf\x81\xc4\xb0\x8d\x6e\xb4\xd1\x10\xe2\xf9\xec\x54\xb2\x98\x24\x4b\x83\xf1\x41\xfc\x52\x1e\xf1\x9f\x14\x6a\xd0\xbb\xe5\x44\x7c\x5c\x39\x1f\xa8\xc7\x8b\x66\x49\xf3\x28\xf4\x91\x3a\xfe\x94\xff\xee\x27\xe6\xdf\xb5\xf4\x47\x14\x87\xea\x2f\x39\x9f\xb1\xaf\xc2\x57\xf9\xbb\x2c\xb7\xe8\xce\xfa\xd8\x2d\xe7\xb8\xa3\xef\xd4\x8d\x1f\xd7\xf1\x3f\x2f\xfd\xee\xb8\x8e\xff\x7f\xa9\xe3\x7f\x87\xbc\x94\x1e\x70\xf9\x37\x6a\xf8\x7f\x5b\xfa\x57\xc7\xe0\xbc\x3c\x21\xab\xfd\xa5\xf6\xff\xcb\x75\xf4\x5f\xac\xa3\xaf\xe2\x54\x1d\xfd\x8b\x52\xff\x98\x42\x57\xf3\x2f\xc9\xbb\xab\x21\x85\x6e\x4a\x83\xea\x09\x90\x29\xef\xa1\x1a\x39\xd1\xb3\x45\xea\xf7\x5f\x67\xfe\xb1\x3a\xfa\xe3\x32\xd1\xd7\xae\xa3\x7f\xa1\x8e\xfe\xb0\x9c\x10\xdf\xd5\xaf\xad\xff\xc7\x75\xc6\x7f\x46\x8e\xbf\x7b\xfe\x35\xd6\x18\xff\x9e\x3a\xfe\xff\x47\x76\xdc\x29\x5c\xdb\xff\x3d\x75\xf4\xb3\xf2\x88\xfd\xce\x75\xf4\xc7\xea\xc4\x7f\x49\xc6\xff\x8a\x56\x8d\x3f\x54\x23\xfe\xac\xb4\x39\xa0\xe8\x9f\x90\x07\xad\x07\x79\x6d\xff\xce\xfb\xd9\x3a\xf1\x5f\x92\x3f\x7c\x8c\x5f\x27\xfe\x73\x75\xe2\x5f\x90\x85\xd5\xd9\xef\x74\xcb\xfa\xa6\xc6\xbf\x97\xd5\xf6\x1f\x91\x57\x0e\x37\x28\x13\x5e\xfd\x7e\x76\xb3\xda\xfe\x63\xbd\x2b\xe3\xef\x96\xfb\x3f\xd5\x7f\x67\x9d\xfc\x47\x3b\xec\xf7\x15\x76\x6d\xff\x6d\x75\xf2\x2f\x4b\xff\x4b\xac\xea\xbf\xa3\x86\xff\x8e\x3a\xf9\x0f\xc8\x2b\x11\xd5\xae\xfa\xfd\x87\xeb\xe5\xdf\xb7\x52\xbf\x5b\xe6\xaa\xfa\xf7\xd6\xf1\x9f\x93\xfe\xef\xb9\xce\xf7\xab\xd5\xf1\x3f\x23\xfd\x2f\xb9\xfc\xaf\xab\xe1\x7f\xae\xce\xfc\xfd\x93\xb5\xf6\xfb\x37\x51\xdb\xbf\xf3\xa6\xf3\x92\xb6\x7f\x39\xeb\xda\x6a\x8b\x27\x22\xeb\xa7\xd7\xe5\xbf\x56\xfc\xb7\x32\xd7\x7f\x8f\x74\x3d\xe3\xf2\xea\xe9\x34\xaf\xea\xad\x71\xc5\xef\xec\x33\xff\x2f\x00\x00\xff\xff\x52\xd1\xa3\x09\xa8\x2f\x00\x00")

func bindataAssetsEbpfmoduleOBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsEbpfmoduleO,
		"assets/ebpf_module.o",
	)
}



func bindataAssetsEbpfmoduleO() (*asset, error) {
	bytes, err := bindataAssetsEbpfmoduleOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/ebpf_module.o",
		size: 12200,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1743341360, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAssetsRock5b510arm64minBtf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9a\xff\x9a\x91\x41\x82\x01\x15\x30\x82\x08\x40\x00\x00\x00\xff\xff\x80\xcb\x0c\x29\x19\x00\x00\x00")

func bindataAssetsRock5b510arm64minBtfBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsRock5b510arm64minBtf,
		"assets/rock5b-5.10-arm64_min.btf",
	)
}



func bindataAssetsRock5b510arm64minBtf() (*asset, error) {
	bytes, err := bindataAssetsRock5b510arm64minBtfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/rock5b-5.10-arm64_min.btf",
		size: 25,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1743341360, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"assets/a12-5.10-arm64_min.btf":    bindataAssetsA12510arm64minBtf,
	"assets/ebpf_module.o":             bindataAssetsEbpfmoduleO,
	"assets/rock5b-5.10-arm64_min.btf": bindataAssetsRock5b510arm64minBtf,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"assets": {Func: nil, Children: map[string]*bintree{
		"a12-5.10-arm64_min.btf": {Func: bindataAssetsA12510arm64minBtf, Children: map[string]*bintree{}},
		"ebpf_module.o": {Func: bindataAssetsEbpfmoduleO, Children: map[string]*bintree{}},
		"rock5b-5.10-arm64_min.btf": {Func: bindataAssetsRock5b510arm64minBtf, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
